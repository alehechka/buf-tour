// Code generated by proroc-gen-graphql, DO NOT EDIT.
package petv1

import (
	"context"

	paymentv1alpha1 "github.com/alehechka/buf-tour/petstore/gen/proto/go/payment/v1alpha1"
	"github.com/alehechka/grpc-graphql-gateway/runtime"
	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"google.golang.org/grpc"

	datetime "google.golang.org/genproto/googleapis/type/datetime"
)

var (
	gql__enum_PetType              *graphql.Enum        // enum PetType in pet/v1/pettype.proto
	gql__type_PutPetResponse       *graphql.Object      // message PutPetResponse in pet/v1/pet.proto
	gql__type_PutPetRequest        *graphql.Object      // message PutPetRequest in pet/v1/pet.proto
	gql__type_PurchasePetResponse  *graphql.Object      // message PurchasePetResponse in pet/v1/pet.proto
	gql__type_PurchasePetRequest   *graphql.Object      // message PurchasePetRequest in pet/v1/pet.proto
	gql__type_Pet                  *graphql.Object      // message Pet in pet/v1/pet.proto
	gql__type_GetPetResponse       *graphql.Object      // message GetPetResponse in pet/v1/pet.proto
	gql__type_GetPetRequest        *graphql.Object      // message GetPetRequest in pet/v1/pet.proto
	gql__type_DeletePetResponse    *graphql.Object      // message DeletePetResponse in pet/v1/pet.proto
	gql__type_DeletePetRequest     *graphql.Object      // message DeletePetRequest in pet/v1/pet.proto
	gql__input_PutPetResponse      *graphql.InputObject // message PutPetResponse in pet/v1/pet.proto
	gql__input_PutPetRequest       *graphql.InputObject // message PutPetRequest in pet/v1/pet.proto
	gql__input_PurchasePetResponse *graphql.InputObject // message PurchasePetResponse in pet/v1/pet.proto
	gql__input_PurchasePetRequest  *graphql.InputObject // message PurchasePetRequest in pet/v1/pet.proto
	gql__input_Pet                 *graphql.InputObject // message Pet in pet/v1/pet.proto
	gql__input_Order               *graphql.InputObject // message Order in payment/v1alpha1/payment.proto
	gql__input_Money               *graphql.InputObject // message Money in google/type/money.proto
	gql__input_GetPetResponse      *graphql.InputObject // message GetPetResponse in pet/v1/pet.proto
	gql__input_GetPetRequest       *graphql.InputObject // message GetPetRequest in pet/v1/pet.proto
	gql__input_DeletePetResponse   *graphql.InputObject // message DeletePetResponse in pet/v1/pet.proto
	gql__input_DeletePetRequest    *graphql.InputObject // message DeletePetRequest in pet/v1/pet.proto
)

func Gql__enum_PetType() *graphql.Enum {
	if gql__enum_PetType == nil {
		gql__enum_PetType = graphql.NewEnum(graphql.EnumConfig{
			Name: "Petv1_Enum_PetType",
			Values: graphql.EnumValueConfigMap{
				"PET_TYPE_UNSPECIFIED": &graphql.EnumValueConfig{
					Value: PetType(0),
				},
				"PET_TYPE_CAT": &graphql.EnumValueConfig{
					Value: PetType(1),
				},
				"PET_TYPE_DOG": &graphql.EnumValueConfig{
					Value: PetType(2),
				},
				"PET_TYPE_SNAKE": &graphql.EnumValueConfig{
					Value: PetType(3),
				},
				"PET_TYPE_HAMSTER": &graphql.EnumValueConfig{
					Value: PetType(4),
				},
			},
		})
	}
	return gql__enum_PetType
}

func Gql__type_PutPetResponse() *graphql.Object {
	if gql__type_PutPetResponse == nil {
		gql__type_PutPetResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_PutPetResponse",
			Fields: graphql.Fields{
				"pet": &graphql.Field{
					Type: Gql__type_Pet(),
				},
			},
		})
	}
	return gql__type_PutPetResponse
}

func Gql__type_PutPetRequest() *graphql.Object {
	if gql__type_PutPetRequest == nil {
		gql__type_PutPetRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_PutPetRequest",
			Fields: graphql.Fields{
				"pet_type": &graphql.Field{
					Type: graphql.NewNonNull(Gql__enum_PetType()),
				},
				"name": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_PutPetRequest
}

func Gql__type_PurchasePetResponse() *graphql.Object {
	if gql__type_PurchasePetResponse == nil {
		gql__type_PurchasePetResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_PurchasePetResponse",
			Fields: graphql.Fields{
				"_": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_PurchasePetResponse
}

func Gql__type_PurchasePetRequest() *graphql.Object {
	if gql__type_PurchasePetRequest == nil {
		gql__type_PurchasePetRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_PurchasePetRequest",
			Fields: graphql.Fields{
				"pet_id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"order": &graphql.Field{
					Type: graphql.NewNonNull(paymentv1alpha1.Gql__type_Order()),
				},
			},
		})
	}
	return gql__type_PurchasePetRequest
}

func Gql__type_Pet() *graphql.Object {
	if gql__type_Pet == nil {
		gql__type_Pet = graphql.NewObject(graphql.ObjectConfig{
			Name:        "Petv1_Type_Pet",
			Description: `Pet represents a pet in the pet store.`,
			Fields: graphql.Fields{
				"pet_type": &graphql.Field{
					Type: graphql.NewNonNull(Gql__enum_PetType()),
				},
				"pet_id": &graphql.Field{
					Type: graphql.String,
				},
				"name": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"created_at": &graphql.Field{
					Type: datetime.Gql__type_DateTime(),
				},
			},
		})
	}
	return gql__type_Pet
}

func Gql__type_GetPetResponse() *graphql.Object {
	if gql__type_GetPetResponse == nil {
		gql__type_GetPetResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_GetPetResponse",
			Fields: graphql.Fields{
				"pet": &graphql.Field{
					Type: Gql__type_Pet(),
				},
			},
		})
	}
	return gql__type_GetPetResponse
}

func Gql__type_GetPetRequest() *graphql.Object {
	if gql__type_GetPetRequest == nil {
		gql__type_GetPetRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_GetPetRequest",
			Fields: graphql.Fields{
				"pet_id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_GetPetRequest
}

func Gql__type_DeletePetResponse() *graphql.Object {
	if gql__type_DeletePetResponse == nil {
		gql__type_DeletePetResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_DeletePetResponse",
			Fields: graphql.Fields{
				"_": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_DeletePetResponse
}

func Gql__type_DeletePetRequest() *graphql.Object {
	if gql__type_DeletePetRequest == nil {
		gql__type_DeletePetRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Petv1_Type_DeletePetRequest",
			Fields: graphql.Fields{
				"pet_id": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_DeletePetRequest
}

func Gql__input_PutPetResponse() *graphql.InputObject {
	if gql__input_PutPetResponse == nil {
		gql__input_PutPetResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_PutPetResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Pet(),
				},
			},
		})
	}
	return gql__input_PutPetResponse
}

func Gql__input_PutPetRequest() *graphql.InputObject {
	if gql__input_PutPetRequest == nil {
		gql__input_PutPetRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_PutPetRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet_type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(Gql__enum_PetType()),
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_PutPetRequest
}

func Gql__input_PurchasePetResponse() *graphql.InputObject {
	if gql__input_PurchasePetResponse == nil {
		gql__input_PurchasePetResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_PurchasePetResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"_": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_PurchasePetResponse
}

func Gql__input_PurchasePetRequest() *graphql.InputObject {
	if gql__input_PurchasePetRequest == nil {
		gql__input_PurchasePetRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_PurchasePetRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet_id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"order": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(paymentv1alpha1.Gql__input_Order()),
				},
			},
		})
	}
	return gql__input_PurchasePetRequest
}

func Gql__input_Pet() *graphql.InputObject {
	if gql__input_Pet == nil {
		gql__input_Pet = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_Pet",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet_type": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(Gql__enum_PetType()),
				},
				"pet_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"created_at": &graphql.InputObjectFieldConfig{
					Type: datetime.Gql__input_DateTime(),
				},
			},
		})
	}
	return gql__input_Pet
}

func Gql__input_Order() *graphql.InputObject {
	if gql__input_Order == nil {
		gql__input_Order = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_Order",
			Fields: graphql.InputObjectConfigFieldMap{
				"order_id": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"recipient_id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(money.Gql__input_Money()),
				},
				"payment_provider": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(paymentv1alpha1.Gql__enum_PaymentProvider()),
				},
			},
		})
	}
	return gql__input_Order
}

func Gql__input_Money() *graphql.InputObject {
	if gql__input_Money == nil {
		gql__input_Money = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_Money",
			Fields: graphql.InputObjectConfigFieldMap{
				"currency_code": &graphql.InputObjectFieldConfig{
					Description: `The three-letter currency code defined in ISO 4217.`,
					Type:        graphql.String,
				},
				"units": &graphql.InputObjectFieldConfig{
					Description: `The whole units of the amount.
 For example if ` + "`" + `currencyCode` + "`" + ` is ` + "`" + `"USD"` + "`" + `, then 1 unit is one US dollar.`,
					Type: graphql.Int,
				},
				"nanos": &graphql.InputObjectFieldConfig{
					Description: `Number of nano (10^-9) units of the amount.
 The value must be between -999,999,999 and +999,999,999 inclusive.
 If ` + "`" + `units` + "`" + ` is positive, ` + "`" + `nanos` + "`" + ` must be positive or zero.
 If ` + "`" + `units` + "`" + ` is zero, ` + "`" + `nanos` + "`" + ` can be positive, zero, or negative.
 If ` + "`" + `units` + "`" + ` is negative, ` + "`" + `nanos` + "`" + ` must be negative or zero.
 For example $-1.75 is represented as ` + "`" + `units` + "`" + `=-1 and ` + "`" + `nanos` + "`" + `=-750,000,000.`,
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_Money
}

func Gql__input_GetPetResponse() *graphql.InputObject {
	if gql__input_GetPetResponse == nil {
		gql__input_GetPetResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_GetPetResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Pet(),
				},
			},
		})
	}
	return gql__input_GetPetResponse
}

func Gql__input_GetPetRequest() *graphql.InputObject {
	if gql__input_GetPetRequest == nil {
		gql__input_GetPetRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_GetPetRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet_id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_GetPetRequest
}

func Gql__input_DeletePetResponse() *graphql.InputObject {
	if gql__input_DeletePetResponse == nil {
		gql__input_DeletePetResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_DeletePetResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"_": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_DeletePetResponse
}

func Gql__input_DeletePetRequest() *graphql.InputObject {
	if gql__input_DeletePetRequest == nil {
		gql__input_DeletePetRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Petv1_Input_DeletePetRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"pet_id": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_DeletePetRequest
}

// graphql__resolver_PetStoreService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_PetStoreService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_PetStoreService creates pointer of service struct
func new_graphql_resolver_PetStoreService(conn *grpc.ClientConn, host string, opts []grpc.DialOption) *graphql__resolver_PetStoreService {
	return &graphql__resolver_PetStoreService{
		conn:        conn,
		host:        host,
		dialOptions: opts,
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_PetStoreService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_PetStoreService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"getPet": &graphql.Field{
			Type: Gql__type_GetPetResponse(),
			Args: graphql.FieldConfigArgument{
				"pet_id": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GetPetRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for getPet")
				}
				client := NewPetStoreServiceClient(conn)
				resp, err := client.GetPet(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetPet")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_PetStoreService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"putPet": &graphql.Field{
			Type: Gql__type_PutPetResponse(),
			Args: graphql.FieldConfigArgument{
				"pet_type": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(Gql__enum_PetType()),
				},
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req PutPetRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for putPet")
				}
				client := NewPetStoreServiceClient(conn)
				resp, err := client.PutPet(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC PutPet")
				}
				return resp, nil
			},
		},

		"deletePet": &graphql.Field{
			Type: Gql__type_DeletePetResponse(),
			Args: graphql.FieldConfigArgument{
				"pet_id": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DeletePetRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for deletePet")
				}
				client := NewPetStoreServiceClient(conn)
				resp, err := client.DeletePet(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC DeletePet")
				}
				return resp, nil
			},
		},

		"purchasePet": &graphql.Field{
			Type: Gql__type_PurchasePetResponse(),
			Args: graphql.FieldConfigArgument{
				"pet_id": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"order": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(paymentv1alpha1.Gql__input_Order()),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req PurchasePetRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for purchasePet")
				}
				client := NewPetStoreServiceClient(conn)
				resp, err := client.PurchasePet(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC PurchasePet")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterPetStoreServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterPetStoreServiceGraphql(mux *runtime.ServeMux, host string, opts ...grpc.DialOption) error {
	return RegisterPetStoreServiceGraphqlHandler(mux, nil, host, opts...)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it manually when application will terminate.
func RegisterPetStoreServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn, host string, opts ...grpc.DialOption) error {
	return mux.AddHandler(new_graphql_resolver_PetStoreService(conn, host, opts))
}
